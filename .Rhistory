print(Details)
print(matrix(1:4, 2,2))
source("./objects/Loading_Objects.R")
z <- new("Parallel_Tempering_Simulations", No_of_Steps=3, Initial_Points= 5)
Make_a_Step_of_the_Algorithm(z)
zw <- new("Metropolis_Hastings_Simulations", No_of_Steps=3, Initial_Point= 5)
Make_a_Step_of_the_Algorithm(zw)
z <- new("Parallel_Tempering_Simulations", No_of_Steps=3, Initial_Points= 5)
new("Parallel_Tempering_Simulations", No_of_Steps=3, Initial_Points= 5)
source("./objects/Loading_Objects.R")
new("Parallel_Tempering_Simulations", No_of_Steps=3, Initial_Points= 5)
w <- c(1,2)
rownames(w) <- c('a', 'b')
w <- as.matrix(w, nrow = length(w), ncol=1)
rownames(w) <- c('a', 'b')
w
CRUCIFIX   <- function( Pair_of_Drawn_Indices,  No_of_Chains )
{
i 	<- Pair_of_Drawn_Indices[1]
j 	<- Pair_of_Drawn_Indices[2]
if (i == No_of_Chains || j == 1 || i >= j) stop("I can't get no Satisfaction.", call. = FALSE)
result 	<-
cbind(
Pair_of_Drawn_Indices,
matrix(
c(
rep.int(i, times = No_of_Chains - i - 1),
setdiff(  (i+1):No_of_Chains,  j )
),
ncol	= No_of_Chains - i - 1,
nrow 	= 2,
byrow 	= TRUE
),
matrix(
c(
setdiff(  1:(j-1), i),
rep.int(  j, times = j - 1 - 1)
),
ncol 	= j - 2,
nrow	= 2,
byrow	= TRUE
)
)
colnames(result)	<- c()
return( result )
}
CRUCIFIX(c(3,6), 9)
source("./targetMeasures/targetMeasures.R")
source("./targetMeasures/targetUnnormalisedDensities.R")
source("./targetMeasures/targetLiangDensities.R")
source("./stateSpaces/stateSpaces.R")
source("./stateSpaces/realStateSpaces.R")
source("./algorithms/algorithms.R")
source("./algorithms/parallelTemperings.R")
source("./simulations/simulations.R")
LiangWangExample <- simulation$new(
iterationsNo	= 100,
strategyNo 	= 2,
example 	= TRUE
)
LiangWangExample
LiangWangExample$simulate()
system.time(
LiangWangExample$simulate()
)
LiangWangExample
directory2 <- "d:/Mateusz/gitHub/Parallel_Tempering"
setwd(directory)
setwd(directory2)
source("./targetMeasures/targetMeasures.R")
source("./targetMeasures/targetMeasures.R")
source("./targetMeasures/targetUnnormalisedDensities.R")
source("./targetMeasures/targetLiangDensities.R")
source("./stateSpaces/stateSpaces.R")
source("./stateSpaces/realStateSpaces.R")
source("./algorithms/algorithms.R")
source("./algorithms/parallelTemperings.R")
source("./simulations/simulations.R")
LiangWangExample <- simulation$new(
iterationsNo	= 1000,
strategyNo 	= 2,
example 	= TRUE
)
system.time(
LiangWangExample$simulate()
)
LiangWangExample
LiangWangExample <- simulation$new(
iterationsNo	= 10000,
strategyNo 	= 2,
example 	= TRUE
)
LiangWangExample
LiangWangExample$simulate()
LiangWangExample
LiangWangExample <- simulation$new(
iterationsNo	= 10000,
strategyNo 	= 2,
example 	= TRUE
)
system.time(
LiangWangExample$simulate()
)
LiangWangExample
400/60
rm( list = ls())
source("./targetMeasures/targetMeasures.R")
source("./targetMeasures/targetUnnormalisedDensities.R")
source("./targetMeasures/targetLiangDensities.R")
source("./stateSpaces/stateSpaces.R")
source("./stateSpaces/realStateSpaces.R")
source("./algorithms/algorithms.R")
source("./algorithms/parallelTemperings.R")
source("./simulations/simulations.R")
LiangWangExample <- simulation$new(
iterationsNo	= 100000,
strategyNo 	= 2,
example 	= TRUE
)
LiangWangExample
#LiangWangExample$simulate()
system.time(
LiangWangExample$simulate()
)
LiangWangExample
rm( list = ls())
directory <- "/home/matteo/Documents/Scienza/Laurea_di_Matematica/Implementation"
setwd(directory)
source("./targetMeasures/targetMeasures.R")
source("./targetMeasures/targetUnnormalisedDensities.R")
source("./targetMeasures/targetLiangDensities.R")
source("./targetMeasures/targetMatteoDensities.R")
source("./stateSpaces/stateSpaces.R")
source("./stateSpaces/realStateSpaces.R")
source("./stateSpaces/realTemperedStateSpaces.R")
source("./algorithms/algorithms.R")
source("./algorithms/metropolisHastings.R")
source("./algorithms/parallelTemperings.R")
source("./simulations/simulations.R")
source("./controllers/controllers.R")
LiangWangExample <- simulation$new(
iterationsNo	= 1000,
strategyNo 	= 5,
example 	= TRUE,
targetMeasureName = 'Matteo'
)
LiangWangExample
system.time(
LiangWangExample$simulate()
)
LiangWangExample
LiangWangExample$stateSpace$initializeEcdfData()
system.time(
LiangWangExample$stateSpace$kolmogorovSmirnov(resolution=0)
)
KS <- LiangWangExample$stateSpace$KS
KS
system.time(
LiangWangExample$stateSpace$kolmogorovSmirnov(resolution=1)
)
KS <- LiangWangExample$stateSpace$KS
KS
source('~/Documents/Scienza/Laurea_di_Matematica/Implementation/examplarySession.R', echo=TRUE)
KS
KS
KS
KS
source("./targetMeasures/targetMeasures.R")
source("./targetMeasures/targetUnnormalisedDensities.R")
source("./targetMeasures/targetLiangDensities.R")
source("./targetMeasures/targetMatteoDensities.R")
source("./stateSpaces/stateSpaces.R")
source("./stateSpaces/realStateSpaces.R")
source("./stateSpaces/realTemperedStateSpaces.R")
source("./algorithms/algorithms.R")
source("./algorithms/metropolisHastings.R")
source("./algorithms/parallelTemperings.R")
source("./simulations/simulations.R")
source("./controllers/controllers.R")
euclid <- function(x,y)
{
return( crossprod(x-y) )
}
trialNo 	<- 10L
strategyNo	<- 6L
results <- as.data.frame(matrix(nrow=trialNo*strategyNo,ncol=63))
nameCreator <- function( letter, minNo, maxNo)
{
sapply(
minNo:maxNo,
function(num){
return( paste( letter, num, sep="",collapse="" ) )
}
)
}
naming  <- c(
'Strategy',
nameCreator('rwByTemp',1,5),
nameCreator('rswap',0,10),
'KS',
nameCreator('MeanNo',1,20),
nameCreator('MeanNo',1,20),
'EX',
'EY',
'EX2',
'EY2',
'EXY'
)
i <- 1L
for( strategy in 1:strategyNo ){
for( trial in 1:trialNo ){
LiangWangExample <- simulation$new(
iterationsNo	= 100,
strategyNo 	= strategy,
example 	= TRUE,
burnIn 		= 200,
save		= FALSE,
trialNo 	= trial,
quasiMetric 	= euclid,
evaluateKS 	= TRUE
)
LiangWangExample$simulate()
vd
}
}
source('~/.active-rstudio-document', echo=TRUE)
system.time(
for( strategy in 1:strategyNo ){
for( trial in 1:trialNo ){
LiangWangExample <- simulation$new(
iterationsNo	= 100,
strategyNo 	= strategy,
example 	= TRUE,
burnIn 		= 200,
save		= FALSE,
trialNo 	= trial,
quasiMetric 	= euclid,
evaluateKS 	= TRUE
)
LiangWangExample$simulate()
results[i,] <- LiangWangExample$furnishResults()
i <- i+1
rm(LiangWangExample)
}
}
)
strategyNo	<- 6L
trialNo 	<- 10L
results <- as.data.frame(matrix(nrow=trialNo*strategyNo,ncol=63))
nameCreator <- function( letter, minNo, maxNo)
{
sapply(
minNo:maxNo,
function(num){
return( paste( letter, num, sep="",collapse="" ) )
}
)
}
naming  <- c(
'Strategy',
nameCreator('rwByTemp',1,5),
nameCreator('rswap',0,10),
'KS',
nameCreator('MeanNo',1,20),
nameCreator('MeanNo',1,20),
'EX',
'EY',
'EX2',
'EY2',
'EXY'
)
i <- 1L
system.time(
for( strategy in 1:strategyNo ){
for( trial in 1:trialNo ){
LiangWangExample <- simulation$new(
iterationsNo	= 100,
strategyNo 	= strategy,
example 	= TRUE,
burnIn 		= 200,
save		= FALSE,
trialNo 	= trial,
quasiMetric 	= euclid,
evaluateKS 	= TRUE
)
LiangWangExample$simulate()
results[i,] <- LiangWangExample$furnishResults()
i <- i+1
rm(LiangWangExample)
}
}
)
source("./targetMeasures/targetMeasures.R")
source("./targetMeasures/targetUnnormalisedDensities.R")
source("./targetMeasures/targetLiangDensities.R")
source("./targetMeasures/targetMatteoDensities.R")
source("./stateSpaces/stateSpaces.R")
source("./stateSpaces/realStateSpaces.R")
source("./stateSpaces/realTemperedStateSpaces.R")
source("./algorithms/algorithms.R")
source("./algorithms/metropolisHastings.R")
source("./algorithms/parallelTemperings.R")
source("./simulations/simulations.R")
source("./controllers/controllers.R")
euclid <- function(x,y)
{
return( crossprod(x-y) )
}
trialNo 	<- 10L
strategyNo	<- 6L
results <- as.data.frame(matrix(nrow=trialNo*strategyNo,ncol=63))
nameCreator <- function( letter, minNo, maxNo)
{
sapply(
minNo:maxNo,
function(num){
return( paste( letter, num, sep="",collapse="" ) )
}
)
}
naming  <- c(
'Strategy',
nameCreator('rwByTemp',1,5),
nameCreator('rswap',0,10),
'KS',
nameCreator('MeanNo',1,20),
nameCreator('MeanNo',1,20),
'EX',
'EY',
'EX2',
'EY2',
'EXY'
)
i <- 1L
system.time(
for( strategy in 1:strategyNo ){
for( trial in 1:trialNo ){
LiangWangExample <- simulation$new(
iterationsNo	= 100,
strategyNo 	= strategy,
example 	= TRUE,
burnIn 		= 200,
save		= FALSE,
trialNo 	= trial,
quasiMetric 	= euclid,
evaluateKS 	= TRUE
)
LiangWangExample$simulate()
results[i,] <- LiangWangExample$furnishResults()
i <- i+1
rm(LiangWangExample)
}
}
)
names( results ) <- naming
results
rm( list = ls())
#directory <- "/home/matteo/Documents/Scienza/Laurea_di_Matematica/Implementation"
#setwd(directory)
source("./targetMeasures/targetMeasures.R")
source("./targetMeasures/targetUnnormalisedDensities.R")
source("./targetMeasures/targetLiangDensities.R")
source("./targetMeasures/targetMatteoDensities.R")
source("./stateSpaces/stateSpaces.R")
source("./stateSpaces/realStateSpaces.R")
source("./stateSpaces/realTemperedStateSpaces.R")
source("./algorithms/algorithms.R")
source("./algorithms/metropolisHastings.R")
source("./algorithms/parallelTemperings.R")
source("./simulations/simulations.R")
source("./controllers/controllers.R")
############################### State-dependent simulation ###################
euclid <- function(x,y)
{
return( crossprod(x-y) )
}
trialNo 	<- 10L
strategyNo	<- 1L
results <- as.data.frame(matrix(nrow=trialNo*strategyNo,ncol=63))
nameCreator <- function( letter, minNo, maxNo)
{
sapply(
minNo:maxNo,
function(num){
return( paste( letter, num, sep="",collapse="" ) )
}
)
}
naming  <- c(
'Strategy',
nameCreator('rwByTemp',1,5),
nameCreator('rswap',0,10),
'KS',
nameCreator('MeanNo',1,20),
nameCreator('MeanNo',1,20),
'EX',
'EY',
'EX2',
'EY2',
'EXY'
)
i <- 1L
system.time(
for( strategy in 1:strategyNo ){
for( trial in 1:trialNo ){
system.time(
LiangWangExample <- simulation$new(
iterationsNo	= 7500,
strategyNo 	= strategy,
example 	= TRUE,
burnIn 		= 2500,
save		= FALSE,
trialNo 	= trial,
quasiMetric 	= euclid,
evaluateKS 	= TRUE
)
LiangWangExample$simulate()
results[i,] <- LiangWangExample$furnishResults()
i <- i+1
rm(LiangWangExample)
)
}
}
)
names( results ) <- naming
results
rm( list = ls())
#directory <- "/home/matteo/Documents/Scienza/Laurea_di_Matematica/Implementation"
#setwd(directory)
source("./targetMeasures/targetMeasures.R")
source("./targetMeasures/targetUnnormalisedDensities.R")
source("./targetMeasures/targetLiangDensities.R")
source("./targetMeasures/targetMatteoDensities.R")
source("./stateSpaces/stateSpaces.R")
source("./stateSpaces/realStateSpaces.R")
source("./stateSpaces/realTemperedStateSpaces.R")
source("./algorithms/algorithms.R")
source("./algorithms/metropolisHastings.R")
source("./algorithms/parallelTemperings.R")
source("./simulations/simulations.R")
source("./controllers/controllers.R")
############################### State-dependent simulation ###################
euclid <- function(x,y)
{
return( crossprod(x-y) )
}
trialNo 	<- 10L
strategyNo	<- 1L
results <- as.data.frame(matrix(nrow=trialNo*strategyNo,ncol=63))
nameCreator <- function( letter, minNo, maxNo)
{
sapply(
minNo:maxNo,
function(num){
return( paste( letter, num, sep="",collapse="" ) )
}
)
}
naming  <- c(
'Strategy',
nameCreator('rwByTemp',1,5),
nameCreator('rswap',0,10),
'KS',
nameCreator('MeanNo',1,20),
nameCreator('MeanNo',1,20),
'EX',
'EY',
'EX2',
'EY2',
'EXY'
)
i <- 1L
system.time(
for( strategy in 1:strategyNo ){
for( trial in 1:trialNo ){
system.time(
LiangWangExample <- simulation$new(
iterationsNo	= 7500,
strategyNo 	= strategy,
example 	= TRUE,
burnIn 		= 2500,
save		= FALSE,
trialNo 	= trial,
quasiMetric 	= euclid,
evaluateKS 	= TRUE
)
LiangWangExample$simulate()
results[i,] <- LiangWangExample$furnishResults()
system.time(
for( strategy in 1:strategyNo ){
for( trial in 1:trialNo ){
LiangWangExample <- simulation$new(
iterationsNo	= 7500,
strategyNo 	= strategy,
example 	= TRUE,
burnIn 		= 2500,
save		= FALSE,
trialNo 	= trial,
quasiMetric 	= euclid,
evaluateKS 	= TRUE
)
LiangWangExample$simulate()
results[i,] <- LiangWangExample$furnishResults()
i <- i+1
rm(LiangWangExample)
}
}
)
KS
install.packages('sqldf')
install.packages('ggplot2')
q()
