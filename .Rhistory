rm(list = ls())
getwd()
library(mvtnorm)
install.packages("mvtnorm")
library(mvtnorm)
source("./Distributions_to_check/tested_distribution.R")
source("./Functions/simulation_mechanism.R")
source("./Functions/additional_functions.R")
source("./Strategies_to_check/tested_strategies.R")
ls()
source("./Distributions_to_check/Liang_Example.R")
ls()
read.csv2("./Data/Liang_Density_Values.csv")
Liang_Distribution_Values   <- read.csv2("./Data/Liang_Density_Values.csv")
persp(Grid,Grid, Liang_Distribution_Values , theta = 12, phi = 30)
Grid 				<- seq(-2, 12, by=.2)
persp(Grid,Grid, Liang_Distribution_Values , theta = 12, phi = 30)
Liang_Distribution_Values   <- as.metrix(read.csv2("./Data/Liang_Density_Values.csv")	)
persp(Grid,Grid, Liang_Distribution_Values , theta = 12, phi = 30)
persp(Grid,Grid, Liang_Distribution_Values , theta = 12, phi = 30)
G <- function()
{
return(
SIMULATION(
Liang_No_of_Chains,
100,	# No of Steps of the algorithm
Liang_Problem_Dimension,
Liang_Initial_Points,
LIANG_TARGET_DENSITY,
STRATEGY_THREE,
EASY_METRIC,
Liang_Proposals_Covariance_Choleskised_Enlisted,
Liang_Inverse_Temperatures
)
)
}
M <- G()
M
ls()
Liang_Distribution_Values
Grid 				<- seq(-2, 12, by=.2)
persp(Grid,Grid, Liang_Distribution_Values , theta = 12, phi = 30)
class(Liang_Distribution_Values)
Liang_Distribution_Values   <- as.matrix(read.csv2("./Data/Liang_Density_Values.csv")	)
class(Liang_Distribution_Values)
persp(Grid,Grid, Liang_Distribution_Values , theta = 12, phi = 30)
persp(Grid,Grid, Liang_Distribution_Values , theta = 12, phi = 30)
persp(Grid,Grid, Liang_Distribution_Values , theta = 12, phi = 30)
a <- seq(1,20)
b <- a^0.25
plot(a,b, bty = "l")
df <- as.data.frame(cbind(a,b))
ggplot(df, aes(x = a, y = b)) + geom_point()
source('~/.active-rstudio-document', echo=TRUE)
library(ggplot2)
df <- as.data.frame(cbind(a,b))
ggplot(df, aes(x = a, y = b)) + geom_point()
ggplot(df, aes(x = a, y = b)) + geom_point() + theme(panel.background = element_rect(fill='white', colour='black'))
ggplot(df, aes(x = a, y = b)) + geom_point() + theme(panel.background = element_blank(fill='white', colour='black')) + theme(panel.grid.major = none, panel.grid.minor = none) + theme( panel.border = theme_L_border())
Liang3D <- head(melt(Liang_Distribution_Values))
colnames(Liang3D) <- c("x","y","z")
rm(list = ls())
directory <- "/home/matteo/Documents/Scienza/Laurea_di_Matematica/Implementation"
rm(directory)
library(mvtnorm)
source("./Distributions_to_check/tested_distribution.R")
source("./Functions/simulation_mechanism.R")
source("./Functions/additional_functions.R")
source("./Strategies_to_check/tested_strategies.R")
source("./Distributions_to_check/Liang_Example.R")
Grid 				<- seq(-2, 12, by=.2)
Liang_Distribution_Values   <- as.matrix(read.csv2("./Data/Liang_Density_Values.csv")	)
persp(Grid,Grid, Liang_Distribution_Values , theta = 12, phi = 30)
class(Liang_Distribution_Values)
v <- ggplot(Liang3D, aes(x, y, z = z))
v<- ggplot(aes(x=Grid, y=Grid, z=Liang_Distribution_Values))
ggplot(df, aes(x = a, y = b)) + geom_point() + theme(panel.background = element_blank(fill='white', colour='black')) + theme(panel.grid.major = none, panel.grid.minor = none) + theme( panel.border = theme_L_border())
contour(
x = Grid,
y = Grid,
z = Liang_Distribution_Values,
zlim = range(Liang_Distribution_Values, finite = TRUE),
nlevels = 5,
levels = pretty( range(Liang_Distribution_Values, finite = TRUE), nlevels)
)
filled.contour(x = Grid,
y = Grid,
z = Liang_Distribution_Values,
color.palette = cm.colors,
levels = pretty(nlevels), nlevels = 20,
col=color.palette(length(nlevels)-1)
)
filled.contour(x = Grid,
y = Grid,
z = Liang_Distribution_Values,
color.palette = cm.colors,
levels = good_levels,
col=colorRampPalette(c("white", "blue"), space = "Lab")(length(good_levels)-1)
)
library(graphics)
good_levels <- pretty(range(Liang_Distribution_Values, finite=TRUE), 20)
colorRampPalette(c('dark red','white','dark blue'))
filled.contour(x = Grid,
y = Grid,
z = Liang_Distribution_Values,
color.palette = cm.colors,
levels = good_levels,
col=terrain.colors(length(good_levels)-1)
)
filled.contour(x = Grid,
y = Grid,
z = Liang_Distribution_Values,
color.palette = cm.colors,
levels = good_levels,
col=colorRampPalette(c("white", "blue"), space = "Lab")(length(good_levels)-1)
)
contour(
x = Grid,
y = Grid,
z = Liang_Distribution_Values,
zlim = range(Liang_Distribution_Values, finite = TRUE),
nlevels = 5,
levels = pretty( range(Liang_Distribution_Values, finite = TRUE), nlevels)
)
contour(
x = Grid,
y = Grid,
z = Liang_Distribution_Values,
zlim = range(Liang_Distribution_Values, finite = TRUE),
nlevels = 5,
levels = pretty( range(Liang_Distribution_Values, finite = TRUE), nlevels)
)
nlevels = 20
contour(
x = Grid,
y = Grid,
z = Liang_Distribution_Values,
zlim = range(Liang_Distribution_Values, finite = TRUE),
nlevels = 5,
levels = pretty( range(Liang_Distribution_Values, finite = TRUE), nlevels)
)
contour(
x = Grid,
y = Grid,
z = Liang_Distribution_Values,
zlim = range(Liang_Distribution_Values, finite = TRUE),
levels = pretty( range(Liang_Distribution_Values, finite = TRUE), nlevels)
)
summary(volcano)
head(volcano)
head(melt(volcano))
library(reshape2)
head(melt(volcano))
v <- ggplot(volcano3d, aes(x, y, z = z))
volcano3d <- melt(volcano)
names(volcano3d) <- c("x", "y", "z")
v <- ggplot(volcano3d, aes(x, y, z = z))
v + stat_contour()
Liang_Distribution_Values
head(Liang_Distribution_Values)
melt(Liang_Distribution_Values)
Liang3D <- head(melt(Liang_Distribution_Values))
colnames(Liang3D) <- c("x","y","z")
v <- ggplot(Liang3D, aes(x, y, z = z))
v + stat_contour()
Z <- Liang_Distribution_Values
colnames(Z) <- c()
Liang3D <- head(melt(Z))
colnames(Liang3D) <- c("x","y","z")
v <- ggplot(Liang3D, aes(x, y, z = z))
v + stat_contour()
filled.contour(x = Grid,
y = Grid,
z = Liang_Distribution_Values,
color.palette = cm.colors,
levels = pretty(nlevels), nlevels = 20,
col=color.palette(length(nlevels)-1)
)
contour(
x = Grid,
y = Grid,
z = Liang_Distribution_Values,
zlim = range(Liang_Distribution_Values, finite = TRUE),
levels = pretty( range(Liang_Distribution_Values, finite = TRUE), nlevels)
)
length(M)
points(c(4,8))
head(melt(volcano))
Liang3D <- head(melt(Z))
length(Liang3D)
dim(Liang3D)
Z <- Liang_Distribution_Values
Z
contour(
x = Grid,
y = Grid,
z = Liang_Distribution_Values,
xlim = range(Grid, finite = TRUE),
ylim = range(Grid, finite = TRUE),
zlim = range(Liang_Distribution_Values, finite = TRUE),
levels = pretty( range(Liang_Distribution_Values, finite = TRUE), nlevels)
)
contour(
x = Grid,
y = Grid,
z = Liang_Distribution_Values,
xlim = range(Grid, finite = TRUE),
ylim = range(Grid, finite = TRUE),
zlim = range(Liang_Distribution_Values, finite = TRUE),
levels = pretty( range(Liang_Distribution_Values, finite = TRUE), nlevels)
)
nlevels = 10
contour(
x = Grid,
y = Grid,
z = Liang_Distribution_Values,
xlim = range(Grid, finite = TRUE),
ylim = range(Grid, finite = TRUE),
zlim = range(Liang_Distribution_Values, finite = TRUE),
levels = pretty( range(Liang_Distribution_Values, finite = TRUE), nlevels)
)
nlevels = 15
contour(
x = Grid,
y = Grid,
z = Liang_Distribution_Values,
xlim = range(Grid, finite = TRUE),
ylim = range(Grid, finite = TRUE),
zlim = range(Liang_Distribution_Values, finite = TRUE),
levels = pretty( range(Liang_Distribution_Values, finite = TRUE), nlevels)
)
xlim = range(Grid, finite = TRUE),
range(Grid, finite = TRUE),
range(Grid, finite = TRUE)
range(Grid, finite = TRUE)[1]
points(c(4,8)+c(range(Grid, finite = TRUE)[1]
,range(Grid, finite = TRUE)[1]
))
points(c(4,8))
points(c(0,0))
rm(list = ls())
directory <- "/home/matteo/Documents/Scienza/Laurea_di_Matematica/Implementation"
getwd()
setwd(directory)
rm(directory)
library(mvtnorm)
source("./Distributions_to_check/tested_distribution.R")
source("./Functions/simulation_mechanism.R")
source("./Functions/additional_functions.R")
source("./Strategies_to_check/tested_strategies.R")
ls()
source("./Distributions_to_check/Liang_Example.R")
Grid 				<- seq(-2, 12, by=.2)
Liang_Distribution_Values   <- as.matrix(read.csv2("./Data/Liang_Density_Values.csv")	)
persp(Grid,Grid, Liang_Distribution_Values , theta = 12, phi = 30)
COORDINATE_PROPOSITION(1:2, 2, LIANG_TARGET_DENSITY, diag(Liang_Temperatures[1]/16, nrow=2, ncol=2))
G <- function()
{
return(
SIMULATION(
Liang_No_of_Chains,
100,	# No of Steps of the algorithm
Liang_Problem_Dimension,
Liang_Initial_Points,
LIANG_TARGET_DENSITY,
STRATEGY_THREE,
EASY_METRIC,
Liang_Proposals_Covariance_Choleskised_Enlisted,
Liang_Inverse_Temperatures
)
)
}
M <- G()
library(graphics)
good_levels <- pretty(range(Liang_Distribution_Values, finite=TRUE), 20)
colorRampPalette(c('dark red','white','dark blue'))
filled.contour(x = Grid,
y = Grid,
z = Liang_Distribution_Values,
color.palette = cm.colors,
levels = good_levels,
col=terrain.colors(length(good_levels)-1)
)
filled.contour(x = Grid,
y = Grid,
z = Liang_Distribution_Values,
color.palette = cm.colors,
levels = good_levels,
col=colorRampPalette(c("white", "blue"), space = "Lab")(length(good_levels)-1)
)
nlevels = 20
filled.contour(x = Grid,
y = Grid,
z = Liang_Distribution_Values,
color.palette = cm.colors,
levels = pretty(nlevels), nlevels = 20,
col=color.palette(length(nlevels)-1)
)
nlevels = 15
contour(
x = Grid,
y = Grid,
z = Liang_Distribution_Values,
xlim = range(Grid, finite = TRUE),
ylim = range(Grid, finite = TRUE),
zlim = range(Liang_Distribution_Values, finite = TRUE),
levels = pretty( range(Liang_Distribution_Values, finite = TRUE), nlevels)
)
range(Grid, finite = TRUE)[1]
points(c(4,8)+c(range(Grid, finite = TRUE)[1]
,range(Grid, finite = TRUE)[1]
))
points(c(0,0))
library(ggplot2)
head(Liang_Distribution_Values)
dim(Liang_Distribution_Values)
library(reshape2)
volcano3d <- melt(volcano)
names(volcano3d) <- c("x", "y", "z")
head(volcano3d)
source("./Distributions_to_check/tested_distribution.R")
Liang_Distribution_Values_2   <- OTHER_VALUE_ESTABLISHER(Grid, LIANG_TARGET_DENSITY)
source("./Distributions_to_check/tested_distribution.R")
Liang_Distribution_Values_2   <- OTHER_VALUE_ESTABLISHER(Grid, LIANG_TARGET_DENSITY)
head(Liang_Distribution_Values_2)
OTHER_VALUE_ESTABLISHER <- function( grid,   FUNCTION_INPUT )
{
tmp <- length(grid)
Z 	<- matrix(nrows=tmp^2, ncol=3)
for( j in 1:tmp)
{
for(i in 1:tmp)
{
Z[i+j,3] <- i
Z[i+j,3] <- j
Z[i+j,3] <- FUNCTION_INPUT(c(grid[i], grid[j]))
}
}
return(Z)
}
OTHER_VALUE_ESTABLISHER(1:10, LIANG_TARGET_DENSITY)
OTHER_VALUE_ESTABLISHER <- function( grid,   FUNCTION_INPUT )
{
tmp <- length(grid)
Z 	<- matrix(nrow=tmp^2, ncol=3)
for( j in 1:tmp)
{
for(i in 1:tmp)
{
Z[i+j,3] <- i
Z[i+j,3] <- j
Z[i+j,3] <- FUNCTION_INPUT(c(grid[i], grid[j]))
}
}
return(Z)
}
OTHER_VALUE_ESTABLISHER(1:10, LIANG_TARGET_DENSITY)
OTHER_VALUE_ESTABLISHER(Grid[1:10], LIANG_TARGET_DENSITY)
OTHER_VALUE_ESTABLISHER <- function( grid,   FUNCTION_INPUT )
{
tmp <- length(grid)
Z 	<- matrix(nrow=tmp^2, ncol=3)
for( j in 1:tmp)
{
for(i in 1:tmp)
{
Z[i+(j-1)*tmp,1] <- i
Z[i+(j-1)*tmp,2] <- j
Z[i+(j-1)*tmp,3] <- FUNCTION_INPUT(c(grid[i], grid[j]))
}
}
return(Z)
}
OTHER_VALUE_ESTABLISHER(Grid[1:10], LIANG_TARGET_DENSITY)
OTHER_VALUE_ESTABLISHER <- function( grid,   FUNCTION_INPUT )
{
tmp <- length(grid)
Z 	<- matrix(nrow=tmp^2, ncol=3)
for( j in 1:tmp)
{
for(i in 1:tmp)
{
Z[i+(j-1)*tmp,1] <- grid[i]
Z[i+(j-1)*tmp,2] <- grid[j]
Z[i+(j-1)*tmp,3] <- FUNCTION_INPUT(c(grid[i], grid[j]))
}
}
return(Z)
}
OTHER_VALUE_ESTABLISHER(Grid[1:10], LIANG_TARGET_DENSITY)
OTHER_VALUE_ESTABLISHER(Grid[1:5], LIANG_TARGET_DENSITY)
data <- OTHER_VALUE_ESTABLISHER(Grid[1:5], LIANG_TARGET_DENSITY)
names(data) <- c("x", "y", "z")
head(data)
v <- ggplot(data, aes(x, y, z =z ))
data <- OTHER_VALUE_ESTABLISHER(Grid[1:5], LIANG_TARGET_DENSITY)
data <-as.data.frame( OTHER_VALUE_ESTABLISHER(Grid[1:5], LIANG_TARGET_DENSITY) )
names(data) <- c("x", "y", "z")
head(data)
v <- ggplot(data, aes(x, y, z =z ))
v+ + stat_contour()
v + stat_contour()
v + stat_contour()
data <-as.data.frame( OTHER_VALUE_ESTABLISHER(Grid, LIANG_TARGET_DENSITY) )
names(data) <- c("x", "y", "z")
head(data)
v <- ggplot(data, aes(x, y, z =z ))
v + stat_contour()
write.csv2(data, "./Data/Liang_Density_Values_For_Contour_gg2plot.csv", row.names=FALSE, col.names=FALSE)
v + stat_contour() + theme_bw()
v + stat_contour() + theme_bw() + geom_point(data = c(0,0))
data2 <- as.data.frame(
matrix( c(0,0),
nrow=1,
ncol=1
)
)
data2                      )
names(data2) <- c("x", "y")
data2 <- as.data.frame(
matrix( c(0,0),
nrow=1,
ncol=2
)
)
names(data2) <- c("x", "y")
data2
v + stat_contour() + theme_bw() + geom_point(data = data2)
v + stat_contour() + theme_bw() + geom_point(data = data2, aes(x=x, y=y))
data2 <- as.data.frame(
matrix( c(0,0,1,1),
nrow=1,
ncol=2
ncol=2
)
data2 <- as.data.frame(
matrix( c(0,0,1,1),
nrow=2,
ncol=2
)
)
names(data2) <- c("x", "y")
data2
v + stat_contour() + theme_bw() + geom_point(data = data2, aes(x=x, y=y))
v <- ggplot(data, aes(x, y, z =z ))
v + stat_contour() + theme_bw() + geom_point(data = data2, aes(x=x, y=y))
qplot(data2)
qplot(data = data2, x,y)
qplot(x,y, data = data2)
data2 <- as.data.frame(
matrix( c(0,0,1,1),
nrow=2,
ncol=2
)
)
names(data2) <- c("x", "y")
qplot(x,y, data = data2)
