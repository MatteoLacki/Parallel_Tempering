sample.interval=20000
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"$" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"translateLexicToTranspositions" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".class1" "as" "<Anonymous>" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".getClassFromCache" "getClassDef" "is" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t.default" "t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".getClassFromCache" "getClassDef" "is" "<Anonymous>" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "translateLexicToTranspositions" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t.default" "t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "$" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sample" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"==" "ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".getClassFromCache" "getClassDef" "is" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!=" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is" "<Anonymous>" "randomWalkRejection" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.factor" "unique.default" "unique" "simplify2array" "sapply" "rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"simplify2array" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.qr" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"*" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t.default" "t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.vector" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".getClassFromCache" "getClassDef" "is" "<Anonymous>" "insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"*" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.vector" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t.default" "t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!=" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.environment" "as.environment" "$" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"length" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isTRUE" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isTRUE" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.vector" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "match" "%in%" "ifelse" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"exp" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"insertStates" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t.default" "t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.list.default" "as.list" "lapply" "sapply" "rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match" "unique" "setdiff" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!=" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "randomWalkRejection" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".identC" "is" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.qr" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t.default" "t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t.default" "t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unique.default" "unique" "simplify2array" "sapply" "rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.qr" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".identC" "as" "<Anonymous>" "insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.qr" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "sapply" "rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".class1" "as" "<Anonymous>" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.environment" "as.environment" "$" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.qr" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!=" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t.default" "t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"*" "insertStates" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!=" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"/" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.vector" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is" "<Anonymous>" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"%in%" "ifelse" "findTranspositionsForUpdate" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.qr" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!=" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isTRUE" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!=" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match" "%in%" "ifelse" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"randomWalkRejection" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isTRUE" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!=" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sapply" "randomWalkRejection" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "generateTranspositions" "apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
":" "lapply" "sapply" "randomWalkRejection" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"-" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".getClassFromCache" "getClassDef" "is" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unique" "simplify2array" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t.default" "t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"parent.frame" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"parent.frame" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".identC" "as" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t.default" "t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "lapply" "sapply" "rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isTRUE" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!=" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".class1" "as" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".getClassFromCache" "getClassDef" "is" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t.default" "t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!=" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sapply" "rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.vector" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".class1" "as" "<Anonymous>" "insertStates" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"parent.frame" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.qr" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sapply" "rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!=" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rep.int" "matrix" "FUN" "lapply" "do.call" "generateTranspositions" "apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "lapply" "unlist" "unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"-" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "do.call" "generateTranspositions" "apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.list.default" "as.list" "lapply" "sapply" "rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".getClassFromCache" "getClassDef" "is" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sapply" "randomWalkRejection" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.vector" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.vector" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.qr" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t.default" "t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match" "%in%" "ifelse" "findTranspositionsForUpdate" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"exp" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"$" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".getClassFromCache" "getClassDef" "is" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.qr" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"%*%" "FUN" "lapply" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.environment" "as.environment" "$" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".class1" "as" "<Anonymous>" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"insertStates" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"generateTranspositions" "apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"-" "insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"exp" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".identC" "as" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".identC" "as" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".identC" "as" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".getClassFromCache" "getClassDef" "is" "<Anonymous>" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"-" "FUN" "lapply" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "$" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.vector" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"translateLexicToTranspositions" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "randomWalkRejection" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t.default" "t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "unlist" "unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.environment" "as.environment" "$" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"randomWalkRejection" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"-" "FUN" "lapply" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "FUN" "lapply" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t.default" "t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!=" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.factor" "unique.default" "unique" "setdiff" "findTranspositionsForUpdate" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"*" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as" "<Anonymous>" "insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"length" "ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"%*%" "FUN" "lapply" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isTRUE" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".getClassFromCache" "getClassDef" "is" "<Anonymous>" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"getClassDef" "is" "<Anonymous>" "randomWalkRejection" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "simplify2array" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.qr" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.environment" "as.environment" "$" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.call" "rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isTRUE" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".getClassFromCache" "getClassDef" "is" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"parent.frame" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "unique" "simplify2array" "sapply" "rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"exp" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!=" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.qr" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.vector" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is" "<Anonymous>" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unique" "simplify2array" "sapply" "randomWalkRejection" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t.default" "t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isTRUE" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.environment" "as.environment" "$" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"parent.frame" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "findTranspositionsForUpdate" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".class1" "as" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"==" "ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!=" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.qr" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isTRUE" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.vector" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rnorm" "FUN" "lapply" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"simplify2array" "sapply" "rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t.default" "t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!=" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "lapply" "unlist" "unique" "simplify2array" "sapply" "rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "unique" "simplify2array" "sapply" "randomWalkRejection" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as" "<Anonymous>" "insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"-" "FUN" "lapply" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "sapply" "rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"exp" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "randomWalkRejection" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".identC" "is" "<Anonymous>" "randomWalkRejection" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unique" "simplify2array" "sapply" "rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unique" "simplify2array" "sapply" "rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unique" "simplify2array" "sapply" "rm" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"length" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".identC" "as" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rownames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!=" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"parent.frame" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"!=" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".getClassFromCache" "getClassDef" "is" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".getClassFromCache" "getClassDef" "is" "<Anonymous>" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"exp" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rep.int" "matrix" "FUN" "lapply" "do.call" "generateTranspositions" "apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".identC" "is" "<Anonymous>" "insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"getClassDef" "is" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.qr" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"*" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t.default" "t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sum" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
".getClassFromCache" "getClassDef" "is" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.qr" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"simplify2array" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.vector" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.vector" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.vector" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unique" "setdiff" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"+" "FUN" "lapply" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"do.call" "generateTranspositions" "apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NCOL" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ncol" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"nrow" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"swapStrategy" "FUN" "apply" "updateSwapUProbs" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"get" "match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"*" "FUN" "lapply" "sapply" "randomWalkRejection" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.qr" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.data.frame" "colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "rownames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"array" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "match" "%in%" "ifelse" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames<-" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"NROW" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"diag" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rev.default" "rev" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "unique" "simplify2array" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"<Anonymous>" "insertStates" "<Anonymous>" "updateAfterRandomWalk" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rownames" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"match.fun" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"is.vector" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"t" "data.class" "all.equal.numeric" "all.equal" "isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"lapply" "unlist" "unique" "simplify2array" "sapply" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"colnames" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"rowSums" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"isSymmetric.matrix" "isSymmetric" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"ifelse" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix" "eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"as.matrix.default" "as.matrix" "solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"unlist" "order" "aperm.default" "aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"matrix" "FUN" "lapply" "do.call" "generateTranspositions" "apply" "translateTranspositionsToLexic" "as.vector" "setdiff" "findTranspositionsForUpdate" "swap" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"eigen" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"solve.default" "solve" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
"aperm" "sweep" "mahalanobis" "dmvnorm" "FUN" "lapply" "sapply" "WEIGHTED_NORMAL_DISTRIBUTION" "FUN" "apply" "getProposalLogsOfUnnormalisedDensities" "<Anonymous>" "randomWalk" "makeStepOfTheAlgorithm" "FUN" "lapply" "sapply" "<Anonymous>" 
